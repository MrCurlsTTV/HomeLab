- name: Download helm
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '700'
  when: ansible_hostname in groups['k8smaster']
  register: helm_download

- name: Check if Helm is already installed
  ansible.builtin.command: helm version --short
  register: helm_check
  failed_when: false
  changed_when: false
  when: ansible_hostname in groups['k8smaster']

- name: Install Helm if not present
  ansible.builtin.command: /tmp/get_helm.sh
  when:
    - ansible_hostname in groups['k8smaster']
    - helm_check.rc != 0
  register: helm_install
  retries: 3
  delay: 10

- name: Remove Helm install script
  ansible.builtin.file:
    path: /tmp/get_helm.sh
    state: absent
  when: ansible_hostname in groups['k8smaster']

- name: Add required Helm repositories
  become: true
  kubernetes.core.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.url }}"
    state: present
  loop:
    - { name: 'jetstack', url: 'https://charts.jetstack.io' }
    - { name: 'rancher-stable', url: 'https://releases.rancher.com/server-charts/stable' }
    - { name: 'kedacore', url: 'https://kedacore.github.io/charts' }
    - { name: 'metallb', url: 'https://metallb.github.io/metallb' }
    - { name: 'argo', url: 'https://argoproj.github.io/argo-helm' }
    - { name: 'longhorn', url: 'https://charts.longhorn.io' }
    - { name: 'bitnami', url: 'https://charts.bitnami.com/bitnami' }
    - { name: 'istio', url: 'https://istio-release.storage.googleapis.com/charts' }
    - { name: 'nfs-subdir-external-provisioner', url: 'https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner' }
    - { name: 'rancher-charts', url: 'https://charts.rancher.io'}
  when: ansible_hostname in groups['k8smaster']
  register: helm_repo_add

- name: Check if Helm config exists for root
  ansible.builtin.stat:
    path: /root/.config/helm
  register: helm_config
  when: ansible_hostname in groups['k8smaster']

- name: Remove existing non-empty helm directory if it exists
  ansible.builtin.file:
    path: "/home/{{ item }}/.config/helm"
    state: absent
  when:
    - ansible_hostname in groups['k8smaster']
    - helm_config.stat.exists
  loop:
    - ansible

- name: Ensure destination directory exists for each user
  ansible.builtin.file:
    path: "/home/{{ item }}/.config"
    state: directory
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0777'
  loop:
    - ansible
  when:
    - ansible_hostname in groups['k8smaster']
    - helm_config.stat.exists

- name: Symlink Helm config to user's home
  ansible.builtin.file:
    src: /root/.config/helm
    dest: "/home/{{ item }}/.config/helm"
    state: link
    force: yes
  loop:
    - ansible
  when:
    - ansible_hostname in groups['k8smaster']
    - helm_config.stat.exists

- name: Find all files in the helm config directory
  ansible.builtin.find:
    paths: "/home/ansible/.config/helm"
    recurse: yes
  register: helm_files
  become: true
  when: ansible_hostname in groups['k8smaster']

- name: Set correct permissions and ownership for files in the helm config directory
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: ansible
    group: ansible
    mode: '0775'
  with_items: "{{ helm_files.files }}"
  become: true
  when: ansible_hostname in groups['k8smaster']

- name: Update all Helm repos
  ansible.builtin.command: helm repo update
  when: ansible_hostname in groups['k8smaster']
  register: helm_update

- name: Install Helm test chart with module
  kubernetes.core.helm:
    name: mysql-test
    chart_ref: bitnami/mysql
    namespace: mysql-test
    create_namespace: true
    state: present
  when: ansible_hostname == 'k8s-master-0'

- name: Uninstall Helm test chart
  kubernetes.core.helm:
    name: mysql-test
    namespace: mysql-test
    state: absent
  when: ansible_hostname == 'k8s-master-0'

- name: Install NFS provisioners
  kubernetes.core.helm:
    name: "nfs-{{ item.name }}"
    chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
    release_namespace: nfs-provisoners
    values:
      nfs:
        server: "{{ nfs_server }}.{{ domain_name }}"
        path: "{{ item.path }}"
      storageClass:
        name: "{{ item.Storage_class }}"
        defaultClass: false
        reclaimPolicy: Retain
    state: present
  loop: "{{ nfs_provisioners }}"
  when: ansible_hostname == 'k8s-master-0'
  register: nfs_provisioner_install
  retries: 5
  delay: 10
  until: nfs_provisioner_install is succeeded


- name: Install cert-manager using Helm
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    chart_version: "{{ cert_manager_version }}"
    release_namespace: cert-manager
    values:
      installCRDs: true
  register: cm_deploy
  retries: 2
  delay: 10
  until: cm_deploy is succeeded
  when: ansible_hostname == 'k8s-master-0'


- name: Install Rancher via Helm
  kubernetes.core.helm:
    name: rancher
    chart_ref: rancher-stable/rancher
    namespace: cattle-system
    values:
      hostname: rancher.{{ domain_name }}
      installCRDs: true
      extraEnvs:
        - name: CATTLE_BOOTSTRAP_PASSWORD
          value: "{{ rancher_bootstrap_password }}"
        - name: istio-virtual-service-ui
          value: true
        - name: CATTLE_PROMETHEUS_METRICS
          value: true
    chart_version: "{{ rancher_version }}"
  when: ansible_hostname == 'k8s-master-0'
  register: rancher_install
  until: rancher_install is succeeded

- name: Patch Rancher Service with MetalLb annotations
  kubernetes.core.k8s:
    api_version: v1
    kind: Service
    name: rancher
    namespace: cattle-system
    merge_type: strategic-merge
    definition:
      metadata:
        annotations:
          metallb.universe.tf/address-pool: metallb-ip-pool
        spec:
          type: LoadBalancer
          LoadBalancerIP: 172.16.12.1
  when: ansible_hostname == 'k8s-master-0'
  register: rancher_patch
  until: rancher_patch is succeeded

- name: Install Rancher Monitoring CRDs
  kubernetes.core.helm:
    name: rancher-monitoring-crd
    chart_ref: rancher-charts/rancher-monitoring-crd
    namespace: cattle-monitoring-system
    create_namespace: true
    state: present
  when: ansible_hostname == 'k8s-master-0'
  register: rancher_monitor_crd
  
- name: Rancher Montioring
  kubernetes.core.helm:
    name: rancher-monitoring
    chart_ref: rancher-charts/rancher-monitoring
    namespace: cattle-monitoring-system
    values:
      persistence:
        enabled: true
        existingClaim: rancher-monitoring-pvc
      storageClass: monitoring-data-nfs
      retention:
        enabled: true
        retention: 7d
    state: present
  when: ansible_hostname == 'k8s-master-0'
  register: rancher_monitoring_install