# HAProxy configuration variables
domain_name: "mrcurls.org"
additional_domains:
  - "*.mrcurls.org"
  - "*.apps.mrcurls.org"

# Let's Encrypt configuration
letsencrypt_email: "mrcurls@mistercurls.com"
# Use staging environment for testing (set to false for production)
letsencrypt_staging: false
cloudflare_api_token: "{{ vault_cloudflare_api_token }}"
# DNS challenge propagation time (seconds)
dns_propagation_seconds: 120

# Automatic certificate renewal settings
letsencrypt_renewal_hour: 2    # Run renewal check at 2 AM
letsencrypt_renewal_minute: 0  # Run at minute 0 of the hour

# Network configuration
vlan_id: 2  # VLAN ID for HAProxy traffic
virtual_ip: "172.16.255.254"  # Virtual IP for HAProxy
virtual_ip_cidr: 16
default_gateway: "172.16.0.1"  # Default gateway IP
dns_servers: "172.16.0.1"  # DNS server is the gateway

# HAProxy stats settings
haproxy_stats_enabled: true
haproxy_stats_uri: "/haproxy-stats"
haproxy_stats_user: "admin"
haproxy_stats_password: "{{ vault_haproxy_stats_password }}"

# Prometheus exporters settings
haproxy_exporter_version: "0.13.0"
haproxy_exporter_port: 9101
haproxy_exporter_metrics_uri: /metrics
node_exporter_version: "1.3.1"
node_exporter_port: 9100

# High Availability settings
keepalived_interface: "eth0.{{ vlan_id }}"  # Use VLAN interface
keepalived_router_id: 51
keepalived_auth_pass: "{{ vault_keepalived_auth_pass }}"

# HAProxy version
haproxy_version: 2.6

# HAProxy global settings
haproxy_socket: /var/lib/haproxy/stats
haproxy_chroot: /var/lib/haproxy
haproxy_user: haproxy
haproxy_group: haproxy

# Haproxy exporter user and password
haproxy_exporter_user: metrics
haproxy_exporter_password: "{{ vault_haproxy_exporter_password }}"

# Dynamic services configuration
haproxy_services:
  - name: "grafana"
    host: "grafana.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "argocd"
    host: "argocd.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "authentik"
    host: "auth.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "radarr"
    host: "radarr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "sonarr"
    host: "sonarr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "overseerr"
    host: "overseerr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "qbittorrent"
    host: "qbittorrent.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "prometheus"
    host: "prometheus.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "vaultwarden"
    host: "vault.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "lidarr"
    host: "lidarr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "prowlarr"
    host: "prowlarr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "bazarr"
    host: "bazarr.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "nzbget"
    host: "nzbget.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "influxdb"
    host: "influxdb.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "postgresql"
    host: "postgresql.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "redis"
    host: "redis.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
  - name: "loki"
    host: "loki.mrcurls.org"
    backend: "istio_ingress_backend"
    port: 80
    protocol: "http"
# Backend configurations
haproxy_backends:
  istio_ingress_backend:
    mode: "http"
    balance: "roundrobin"
    health_check:
      method: "GET"
      path: "/healthz/ready"
      protocol: "HTTP/1.1"
      expected_status: 200
      port: 32545
    servers: []
  
# Example of a direct backend (not using Istio)
#  direct_backend:
#    mode: "http"
#    balance: "roundrobin"
#    health_check:
#      method: "GET"
#      path: "/health"
#      protocol: "HTTP/1.1"
#      expected_status: 200
#    servers:
#      - name: "direct-server-1"
#        host: "192.168.1.100"
#        port: 8080
#        check: true
#      - name: "direct-server-2"
#        host: "192.168.1.101"
#        port: 8080
#        check: true
