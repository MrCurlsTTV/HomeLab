- name: Create HAProxy certs directory
  file:
    path: /etc/haproxy/certs
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Create Let's Encrypt configuration directory
  file:
    path: /etc/letsencrypt/conf
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Copy Cloudflare configuration file
  template:
    src: files/cloudflare.ini
    dest: /etc/letsencrypt/cloudflare.ini
    owner: root
    group: root
    mode: '0600'

- name: Copy DNS-01 challenge hook script
  copy:
    src: files/letsencrypt-dns-01-hook.sh
    dest: /usr/local/bin/letsencrypt-dns-01-hook.sh
    owner: root
    group: root
    mode: '0700'

- name: Copy DNS cleanup hook script
  copy:
    src: files/letsencrypt-dns-cleanup-hook.sh
    dest: /usr/local/bin/letsencrypt-dns-cleanup-hook.sh
    owner: root
    group: root
    mode: '0700'

- name: Copy certificate renewal script
  copy:
    src: files/renew-certs.sh
    dest: /usr/local/bin/renew-certs.sh
    owner: root
    group: root
    mode: '0700'

# Kill any running Certbot processes and clean up locks
- name: Find any running Certbot processes
  shell: pgrep -f certbot || echo ""
  register: certbot_processes
  changed_when: false

- name: Kill any running Certbot processes
  shell: "kill -9 {{ certbot_processes.stdout_lines | join(' ') }}"
  when: certbot_processes.stdout_lines | length > 0
  ignore_errors: true

- name: Remove Certbot lock files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /var/log/letsencrypt/.certbot.lock
    - /var/lib/letsencrypt/locks
  ignore_errors: true

- name: Remove temporary Certbot directories
  shell: find /tmp -name "*certbot*" -exec rm -rf {} \; 2>/dev/null || true
  changed_when: false

- name: Install jq for JSON processing
  package:
    name: jq
    state: present

- name: Install certbot and dependencies
  apt:
    name:
      - certbot
      - python3-setuptools
      - python3-dev
      - git
      - build-essential
    state: present
    update_cache: yes

- name: Clone certbot-dns-cloudflare repository
  git:
    repo: https://github.com/certbot/certbot.git
    dest: /tmp/certbot
    version: master
    depth: 1

- name: Install certbot-dns-cloudflare from source
  shell: |
    cd /tmp/certbot/certbot-dns-cloudflare
    python3 setup.py install
  args:
    creates: /usr/local/lib/python3*/dist-packages/certbot_dns_cloudflare*.egg-info

- name: Create certbot directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - /etc/letsencrypt
    - /var/lib/letsencrypt
    - /var/log/letsencrypt
    - /etc/letsencrypt/renewal-hooks/post

- name: Create Cloudflare credentials file
  template:
    src: files/cloudflare.ini
    dest: /etc/letsencrypt/cloudflare.ini
    owner: root
    group: root
    mode: '0600'

- name: Copy certificate renewal hooks
  copy:
    src: "files/{{ item }}"
    dest: "/etc/letsencrypt/renewal-hooks/post/{{ item | basename }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - renew-certs.sh

- name: Add certificate renewal cron job
  cron:
    name: "Renew Let's Encrypt certificates"
    special_time: daily
    job: "certbot renew --quiet"
    user: root

# Copy over the certificate request script
- name: Copy certificate request script
  copy:
    src: files/request-cert.sh
    dest: /usr/local/bin/request-cert.sh
    owner: root
    group: root
    mode: '0700'

# Copy over the certificate cleanup script
- name: Copy certificate cleanup script
  copy:
    src: files/cleanup-certs.sh
    dest: /usr/local/bin/cleanup-certs.sh
    owner: root
    group: root
    mode: '0700'

# Clean up any existing duplicate certificates first
- name: Clean up any duplicate certificates
  command: /usr/local/bin/cleanup-certs.sh
  ignore_errors: true

# Issue certificate (will only run if certificate doesn't exist)
- name: Check if certificate already exists
  stat:
    path: "/etc/letsencrypt/live/{{ domain_name }}/cert.pem"
  register: cert_file

- name: Issue Let's Encrypt certificate with the certificate request script
  command: >
    /usr/local/bin/request-cert.sh
    -d {{ domain_name }}
    {% for domain in additional_domains %}
    -d {{ domain }}
    {% endfor %}
    -e {{ letsencrypt_email }}
    -p {{ dns_propagation_seconds | default(120) }}
    -c /etc/letsencrypt/cloudflare.ini
    -r 3
    -s haproxy
  when: not cert_file.stat.exists
  ignore_errors: true

# After the certificate issuance task, check for any certificates
- name: Check for any Let's Encrypt certificates (including with suffixes)
  find:
    paths: /etc/letsencrypt/live
    patterns: "{{ domain_name }}*"
    file_type: directory
  register: letsencrypt_cert_dirs
  ignore_errors: true

# Create directory for HAProxy certificates
- name: Create HAProxy certs directory
  file:
    path: /etc/haproxy/certs
    state: directory
    owner: root
    group: root
    mode: '0700'

# Combine certificates for HAProxy if any are found
- name: Combine certificates for HAProxy
  shell: |
    for domain_dir in $(find /etc/letsencrypt/live/ -maxdepth 1 -type d | grep -v README); do
      domain_name=$(basename "$domain_dir" | sed 's/-[0-9]*$//')  # Remove suffixes like -0001
      if [ -f "$domain_dir/fullchain.pem" ] && [ -f "$domain_dir/privkey.pem" ]; then
        cat "$domain_dir/fullchain.pem" "$domain_dir/privkey.pem" > "/etc/haproxy/certs/$domain_name.pem"
        chmod 600 "/etc/haproxy/certs/$domain_name.pem"
        echo "Created combined certificate for $domain_name"
      fi
    done
  when: letsencrypt_cert_dirs.matched > 0 or cert_file.stat.exists
