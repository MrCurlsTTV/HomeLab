global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats socket /var/lib/haproxy/stats mode 666 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # SSL tuning
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor
    timeout connect 10s
    timeout client  300s
    timeout server  300s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTP 
frontend http_front
    bind {{ virtual_ip }}:80
    mode http
    option httplog
    
    # Define ACLs for dynamic services
{% for service in haproxy_services %}
    acl host_{{ service.name }} hdr(host) -i {{ service.host }}
{% endfor %}

    # Route to backends based on service configuration
{% for service in haproxy_services %}
    use_backend {{ service.backend }} if host_{{ service.name }}
{% endfor %}
    
    # Define ACL for stats
    acl stats_acl path_beg {{ haproxy_stats_uri }}
    
    # HAProxy stats if accessed via HTTP
    use_backend stats_backend if stats_acl
    
    # For normal traffic (basic setup before SSL is available)
    default_backend empty_backend

# Frontend for HTTPS
frontend https_front
    {% if ssl_cert_available | default(true) %}
    bind {{ virtual_ip }}:443 ssl crt /etc/haproxy/certs/{{ domain_name }}.pem
    {% else %}
    bind {{ virtual_ip }}:443
    {% endif %}
    mode http
    option httplog
    
    # Define ACLs for dynamic services
    {% for service in haproxy_services %}
    acl host_{{ service.name }} hdr(host) -i {{ service.host }}
    {% endfor %}

    # Route to backends based on service configuration
    {% for service in haproxy_services %}
    use_backend {{ service.backend }} if host_{{ service.name }}
    {% endfor %}
    
    # Define ACL for stats
    acl stats_acl path_beg {{ haproxy_stats_uri }}
    
    # HAProxy stats
    use_backend stats_backend if stats_acl
    
    # Define ACL for Prometheus
    acl prometheus_acl path {{ haproxy_exporter_metrics_uri }}
    
    # Prometheus metrics endpoint
    use_backend prometheus_backend if prometheus_acl
    
    # Return a default page for other HTTPS requests
    default_backend empty_backend

# Frontend for Kubernetes API - TCP mode for direct passthrough
frontend k8s_api_front
    bind {{ virtual_ip }}:6443
    option tcplog
    mode tcp
    {% if groups['kubernetes'] is defined and groups['kubernetes']|length > 0 %}
    default_backend k8s_api_backend
    {% else %}
    default_backend empty_tcp_backend
    {% endif %}

# Frontend for Prometheus metrics
frontend stats
    bind *:8404
    mode http
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 10s


# Backend for HAProxy stats
backend stats_backend
    stats enable
    stats uri {{ haproxy_stats_uri }}
    stats refresh 10s
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    stats hide-version
    stats show-legends
    stats show-node

# Backend for Prometheus metrics
backend prometheus_backend
    server prometheus 127.0.0.1:{{ haproxy_exporter_port }}

# Empty backend for default HTTPS requests
backend empty_backend
    mode http
    http-request return status 200 content-type "text/html" string "<html><body><h1>HAProxy Load Balancer</h1><p>This is the default page.</p></body></html>"

# Dynamic backends based on configuration
{% for backend_name, backend_config in haproxy_backends.items() %}
backend {{ backend_name }}
    mode {{ backend_config.mode }}
    balance {{ backend_config.balance }}
{% if backend_name == 'istio_ingress_backend' %}
    option tcp-check
    tcp-check connect port 32242
{% else %}
{% if backend_config.health_check is defined %}
    option httpchk {{ backend_config.health_check.method }} {{ backend_config.health_check.path }} {{ backend_config.health_check.protocol }}
    http-check expect status {{ backend_config.health_check.expected_status }}
{% endif %}
{% endif %}
{% if backend_name == 'istio_ingress_backend' %}
{% for host in groups['workers'] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:32242 check
{% endfor %}
    mode http
    http-request set-header Host %[req.hdr(host)]
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    timeout connect 10s
    timeout server 300s
{% else %}
{% for server in backend_config.servers %}
    server {{ server.name }} {{ server.host }}:{{ server.port }}{% if server.check %} check{% endif %}
{% endfor %}
{% endif %}

{% endfor %}

{% if groups['kubernetes'] is defined and groups['kubernetes']|length > 0 %}
# Backend for Kubernetes API (TCP mode for direct passthrough)
backend k8s_api_backend
    mode tcp
    balance roundrobin
    option tcp-check
    # Use only control plane nodes for API server
{% for host in groups['kubernetes'] if 'master' in host %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:6443 check
{% endfor %}
{% else %}
# Empty TCP backend when no Kubernetes hosts are defined
backend empty_tcp_backend
    mode tcp
    server localhost 127.0.0.1:6443 check
{% endif %}

# End of HAProxy configuration 