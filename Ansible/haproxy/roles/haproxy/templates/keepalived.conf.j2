! Configuration File for keepalived

global_defs {
   notification_email {
     {{ letsencrypt_email }}
   }
   notification_email_from {{ letsencrypt_email }}
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id {{ inventory_hostname }}
   vrrp_skip_check_adv_addr
   ! Removing strict mode as it conflicts with authentication
   ! vrrp_strict
   ! Setting non-zero values for garp/gna intervals
   vrrp_garp_interval 0.001
   vrrp_gna_interval 0.001
   script_user keepalived_script
   enable_script_security
}

! Define the script used to check if HAProxy is running
vrrp_script check_haproxy {
   script "/usr/local/bin/check_haproxy.sh"
   interval 2
   weight 2
   user keepalived_script
   rise 2
   fall 2
}

! Define the virtual router instance
vrrp_instance VI_1 {
   state {{ keepalived_state | default('BACKUP') }}
   interface {{ keepalived_interface | default('eth0.'+vlan_id|string) }}
   virtual_router_id {{ keepalived_router_id | default(51) }}
   priority {{ keepalived_priority | default(100) }}
   advert_int 1
   ! Removed nopreempt to allow master to take over when it comes back online
   
   ! Removing authentication as it's not compatible with strict mode
   ! Using unicast communication only
   # authentication {
   #     auth_type PASS
   #     auth_pass {{ keepalived_auth_pass }}
   # }
   
   ! Define the virtual IP address for the load balancer
   virtual_ipaddress {
       {{ virtual_ip }}/{{ virtual_ip_cidr }} dev {{ keepalived_interface | default('eth0.'+vlan_id|string) }}
   }
   
   ! Use unicast instead of multicast for VRRP communication
   unicast_src_ip {{ ansible_host }}
   unicast_peer {
   {% for host in groups['haproxy'] %}
   {% if hostvars[host]['ansible_host'] != ansible_host %}
       {{ hostvars[host]['ansible_host'] }}
   {% endif %}
   {% endfor %}
   }

   ! Add tracking for the HAProxy service
   track_script {
       check_haproxy
   }
   
   ! Define notification scripts
   notify_master "/usr/local/bin/notify_master.sh"
   notify_backup "/usr/local/bin/notify_backup.sh"
   notify_fault "/usr/local/bin/notify_fault.sh"
} 