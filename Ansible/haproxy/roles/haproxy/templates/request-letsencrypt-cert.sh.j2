#!/bin/bash

# Let's Encrypt Certificate Management Script for HAProxy
# Uses DNS challenge via Cloudflare API
# Generates browser-trusted certificates

set -euo pipefail

# Configuration
DOMAIN="{{ domain_name }}"
CERT_DIR="/etc/haproxy/certs"
LETSENCRYPT_DIR="/etc/letsencrypt"
CREDENTIALS_FILE="/etc/letsencrypt/cloudflare-credentials.ini"

# Logging functions
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

success() {
    echo "[SUCCESS] $1"
}

error() {
    echo "[ERROR] $1" >&2
}

# Ensure running as root
if [ "$EUID" -ne 0 ]; then
    error "This script must be run as root"
    exit 1
fi

# Check if credentials file exists
if [ ! -f "$CREDENTIALS_FILE" ]; then
    error "Cloudflare credentials file not found: $CREDENTIALS_FILE"
    exit 1
fi

log "Starting Let's Encrypt certificate management for $DOMAIN"

# Create Let's Encrypt directories if they don't exist
mkdir -p "$LETSENCRYPT_DIR"
mkdir -p "$CERT_DIR"

# Check if certificate exists and is valid
CERT_PATH="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"
KEY_PATH="/etc/letsencrypt/live/$DOMAIN/privkey.pem"

if [ -f "$CERT_PATH" ]; then
    log "Existing certificate found, checking validity..."
    
    # Check if certificate expires in less than 30 days
    if openssl x509 -checkend 2592000 -noout -in "$CERT_PATH" >/dev/null 2>&1; then
        log "Certificate is still valid for more than 30 days"
        RENEW_NEEDED=false
    else
        log "Certificate expires within 30 days, renewal needed"
        RENEW_NEEDED=true
    fi
else
    log "No existing certificate found, will request new certificate"
    RENEW_NEEDED=true
fi

# Request or renew certificate if needed
if [ "$RENEW_NEEDED" = true ]; then
    log "Requesting/renewing Let's Encrypt certificate for $DOMAIN and *.$DOMAIN..."
    
    # Use staging server for testing (remove --staging for production)
    STAGING_FLAG="{{ '--staging' if letsencrypt_staging | default(true) else '' }}"
    
    if [ -n "$STAGING_FLAG" ]; then
        log "Using Let's Encrypt STAGING environment for testing"
    else
        log "Using Let's Encrypt PRODUCTION environment"
    fi
    
    certbot certonly \
        $STAGING_FLAG \
        --dns-cloudflare \
        --dns-cloudflare-credentials "$CREDENTIALS_FILE" \
        --dns-cloudflare-propagation-seconds {{ dns_propagation_seconds | default(60) }} \
        --non-interactive \
        --agree-tos \
        --email "{{ letsencrypt_email | default('admin@' + domain_name) }}" \
        --domains "$DOMAIN,*.$DOMAIN, *.apps.$DOMAIN" \
        --cert-name "$DOMAIN" \
        --keep-until-expiring \
        --expand
    
    if [ $? -eq 0 ]; then
        success "Certificate request/renewal completed successfully"
    else
        error "Certificate request/renewal failed"
        exit 1
    fi
else
    log "Certificate renewal not needed, using existing certificate"
fi

# Copy certificates to HAProxy directory
log "Copying certificates to HAProxy directory..."

# Copy individual files for testing/inspection
cp "$CERT_PATH" "$CERT_DIR/$DOMAIN.crt"
cp "$KEY_PATH" "$CERT_DIR/$DOMAIN.key"

# Create combined PEM file for HAProxy
cat "$CERT_PATH" "$KEY_PATH" > "$CERT_DIR/$DOMAIN.pem"

# Set proper permissions
chmod 644 "$CERT_DIR/$DOMAIN.crt"
chmod 600 "$CERT_DIR/$DOMAIN.key"
chmod 600 "$CERT_DIR/$DOMAIN.pem"
chown root:root "$CERT_DIR/$DOMAIN.crt" "$CERT_DIR/$DOMAIN.key" "$CERT_DIR/$DOMAIN.pem"

success "Certificate files created:"
log "  - Certificate: $CERT_DIR/$DOMAIN.crt"
log "  - Private Key: $CERT_DIR/$DOMAIN.key"
log "  - Combined (HAProxy): $CERT_DIR/$DOMAIN.pem"

# Verify certificate
log "Verifying certificate..."
if openssl x509 -in "$CERT_DIR/$DOMAIN.pem" -text -noout >/dev/null 2>&1; then
    CERT_INFO=$(openssl x509 -in "$CERT_DIR/$DOMAIN.pem" -text -noout 2>/dev/null)
    ISSUER=$(echo "$CERT_INFO" | grep "Issuer:" | sed 's/.*Issuer: //')
    SUBJECT=$(echo "$CERT_INFO" | grep "Subject:" | sed 's/.*Subject: //')
    NOT_AFTER=$(echo "$CERT_INFO" | grep "Not After" | sed 's/.*Not After : //')
    
    success "Certificate verification successful:"
    log "  - Issuer: $ISSUER"
    log "  - Subject: $SUBJECT"
    log "  - Expires: $NOT_AFTER"
    
    # Check if it's a wildcard certificate
    if echo "$CERT_INFO" | grep -q "DNS:\*\.$DOMAIN"; then
        success "Wildcard certificate confirmed for *.$DOMAIN"
    fi
    
    # Calculate days until expiration
    EXPIRE_EPOCH=$(date -d "$NOT_AFTER" +%s 2>/dev/null || echo "0")
    CURRENT_EPOCH=$(date +%s)
    
    if [ "$EXPIRE_EPOCH" -gt "$CURRENT_EPOCH" ]; then
        DAYS_UNTIL_EXPIRY=$(( (EXPIRE_EPOCH - CURRENT_EPOCH) / 86400 ))
        success "Certificate valid for $DAYS_UNTIL_EXPIRY more days"
    fi
else
    error "Certificate verification failed"
    exit 1
fi

success "Let's Encrypt certificate deployment complete!"
log "Certificate path: $CERT_DIR/$DOMAIN.pem"
log "Certificate type: Let's Encrypt (browser trusted)"
log "HAProxy can now use this certificate for SSL termination"

# Display certificate file info
log "Final certificate file info:"
ls -la "$CERT_DIR/$DOMAIN.pem"
