---
- name: Update HAProxy Configuration Only
  hosts: haproxy
  become: true
  gather_facts: yes
  
  tasks:
    - name: Check if SSL certificate exists
      stat:
        path: "/etc/haproxy/certs/{{ domain_name }}.pem"
      register: ssl_cert_exists
      
    - name: Set SSL certificate availability fact
      set_fact:
        ssl_cert_available: "{{ ssl_cert_exists.stat.exists }}"
        
    - name: Display current configuration status
      debug:
        msg: |
          Configuration Update for {{ inventory_hostname }}:
          - SSL certificate: {{ 'AVAILABLE' if ssl_cert_exists.stat.exists else 'MISSING' }}
          - SSL enabled: {{ 'YES' if ssl_cert_available else 'NO' }}
    
    - name: Backup current HAProxy configuration
      copy:
        src: /etc/haproxy/haproxy.cfg
        dest: "/etc/haproxy/haproxy.cfg.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
    
    - name: Update HAProxy configuration (unified template with conditional SSL)
      template:
        src: roles/haproxy/templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: '0644'
      register: config_update
      
    - name: Fix line endings on HAProxy configuration
      shell: sed -i 's/\r$//' /etc/haproxy/haproxy.cfg
      when: config_update.changed
      
    - name: Ensure configuration has proper ending
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        line: "# End of HAProxy configuration"
        insertafter: EOF
      when: config_update.changed
      
    - name: Test HAProxy configuration
      shell: haproxy -c -f /etc/haproxy/haproxy.cfg
      register: config_test
      
    - name: Display configuration test results
      debug:
        msg: "Configuration test: {{ 'PASSED' if config_test.rc == 0 else 'FAILED' }}"
      
    - name: Fail if configuration test failed
      fail:
        msg: "HAProxy configuration test failed. Not applying changes."
      when: config_test.rc != 0
      
    - name: Reload HAProxy service
      systemd:
        name: haproxy
        state: reloaded
      when: config_test.rc == 0
      register: haproxy_reload
      
    - name: Wait for HAProxy to be ready
      wait_for:
        port: "{{ item }}"
        host: "{{ ansible_host }}"
        timeout: 10
      with_items:
        - 80
        - 443
      when: ssl_cert_exists.stat.exists
      
    - name: Verify HAProxy is responding
      shell: |
        echo "=== HAProxy Status After Update ==="
        echo "Service: $(systemctl is-active haproxy)"
        echo "HTTP Port: $(netstat -tlnp | grep :80 | head -1 || echo 'Not listening')"
        echo "HTTPS Port: $(netstat -tlnp | grep :443 | head -1 || echo 'Not listening')"
        echo "Config test: $(haproxy -c -f /etc/haproxy/haproxy.cfg >/dev/null 2>&1 && echo 'VALID' || echo 'INVALID')"
      register: final_status
      
    - name: Display final status
      debug:
        msg: "{{ final_status.stdout_lines }}"
        
    - name: Configuration update summary
      debug:
        msg: |
          HAProxy Configuration Update Complete:
          - Node: {{ inventory_hostname }}
          - SSL enabled: {{ 'YES' if ssl_cert_available else 'NO' }}
          - Config changed: {{ config_update.changed }}
          - Service reloaded: {{ haproxy_reload.changed if haproxy_reload.changed is defined else false }}
          - Status: {{ 'SUCCESS' if config_test.rc == 0 else 'FAILED' }}
