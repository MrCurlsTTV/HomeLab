# Job to generate Authentik secret key automatically
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-secret-generator
  namespace: auth
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: secret-generator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          # Generate a secure 50-character secret key
          SECRET_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-50)
          
          # Create the secret using kubectl directly
          kubectl create secret generic authentik-secret \
            --namespace=auth \
            --from-literal=secret_key="$SECRET_KEY" \
            --from-literal=db_user="postgres" \
            --from-literal=db_password="your-strong-postgres-password" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Authentik secret key generated successfully"
          echo "Secret key: $SECRET_KEY"
        volumeMounts:
        - name: kubectl-config
          mountPath: /root/.kube
          readOnly: true
      volumes:
      - name: kubectl-config
        projected:
          sources:
          - serviceAccount:
              name: authentik-secret-generator
      serviceAccountName: authentik-secret-generator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authentik-secret-generator
  namespace: auth
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: authentik-secret-generator
  namespace: auth
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentik-secret-generator
  namespace: auth
subjects:
- kind: ServiceAccount
  name: authentik-secret-generator
  namespace: auth
roleRef:
  kind: Role
  name: authentik-secret-generator
  apiGroup: rbac.authorization.k8s.io
