---
apiVersion: v1
kind: Service
metadata:
  name: lidarr-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: lidarr-exporter
    app.kubernetes.io/instance: lidarr-exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9707"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: lidarr-exporter
    app.kubernetes.io/instance: lidarr-exporter
  ports:
    - name: monitoring
      port: 9707
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: lidarr-exporter
    app.kubernetes.io/instance: lidarr-exporter
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: lidarr-exporter
      app.kubernetes.io/instance: lidarr-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lidarr-exporter
        app.kubernetes.io/instance: lidarr-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9707"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: servarr-exporter
      initContainers:
        - name: wait-for-secret
          image: bitnami/kubectl:latest
          command: ['sh', '-c', 'until kubectl get secret servarr-secret -n monitoring; do echo waiting for secret; sleep 2; done']
      containers:
        - name: lidarr-exporter
          image: ghcr.io/onedr0p/exportarr:v1.5.3
          imagePullPolicy: IfNotPresent
          args:
            - lidarr
          env:
            - name: PORT
              value: "9707"
            - name: URL
              value: "http://lidarr.servarr.svc.cluster.local:8686"
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  name: servarr-secret
                  key: lidarr_apikey
          ports:
            - name: monitoring
              containerPort: 9707
          livenessProbe:
            httpGet:
              path: /healthz
              port: monitoring
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: monitoring
            failureThreshold: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 500m
              memory: 256Mi