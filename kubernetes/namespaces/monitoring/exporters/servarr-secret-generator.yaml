---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: servarr-secret-generator
  namespace: monitoring
---
# Role for monitoring namespace (to manage secrets)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: servarr-secret-generator
  namespace: monitoring
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "delete"]
---
# Role for servarr namespace (to read pods and exec into them)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servarr-pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/exec", "pods/log"]
    verbs: ["get", "list", "watch", "create"]
---
# RoleBinding for monitoring namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: servarr-secret-generator
  namespace: monitoring
subjects:
  - kind: ServiceAccount
    name: servarr-secret-generator
    namespace: monitoring
roleRef:
  kind: Role
  name: servarr-secret-generator
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRoleBinding for pod access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servarr-pod-reader
subjects:
  - kind: ServiceAccount
    name: servarr-secret-generator
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: servarr-pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: servarr-secret-generator
  namespace: monitoring
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    sidecar.istio.io/inject: "false"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: servarr-secret-generator
      restartPolicy: OnFailure
      containers:
        - name: secret-generator
          image: bitnami/kubectl:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -e
              SECRET_NAME="servarr-secret"
              NAMESPACE="monitoring"

              # Function to extract API key from config.xml
              extract_api_key() {
                local app=$1
                local pod=$2
                echo "Checking config for $app in pod $pod..." >&2
                
                local config
                config=$(kubectl exec -n servarr $pod -c $app -- cat /config/config.xml 2>/dev/null) || {
                  echo "Failed to read config for $app" >&2
                  return 1
                }
                
                local apikey
                apikey=$(echo "$config" | grep -oP '(?<=<ApiKey>)[^<]+' || echo "")
                if [ -z "$apikey" ]; then
                  echo "No API key found in config for $app" >&2
                  return 1
                fi
                echo "Successfully extracted API key for $app" >&2
                printf "%s" "$apikey"
              }

              # Function to wait for pod and get API key with retries
              get_api_key() {
                local app=$1
                local max_attempts=30
                local wait_seconds=10
                local attempt=1
                
                echo "Getting API key for $app..." >&2
                while [ $attempt -le $max_attempts ]; do
                  echo "Attempt $attempt for $app..." >&2
                  
                  local pod
                  pod=$(kubectl get pod -n servarr -l app=$app -o jsonpath='{.items[0].metadata.name}' 2>/dev/null) || {
                    echo "No pod found for $app yet" >&2
                    sleep $wait_seconds
                    attempt=$((attempt + 1))
                    continue
                  }
                  
                  local apikey
                  if apikey=$(extract_api_key "$app" "$pod"); then
                    echo "$app API key found" >&2
                    printf "%s" "$apikey"
                    return 0
                  fi
                  
                  echo "Failed attempt $attempt for $app, waiting $wait_seconds seconds..." >&2
                  sleep $wait_seconds
                  attempt=$((attempt + 1))
                done
                
                echo "Failed to get API key for $app after $max_attempts attempts" >&2
                return 1
              }

              # Get API keys with retries
              echo "Getting API keys..." >&2
              
              echo "Getting Lidarr API key..." >&2
              LIDARR_API_KEY=$(get_api_key "lidarr")
              echo "Lidarr API key: ${LIDARR_API_KEY:0:8}..." >&2
              
              echo "Getting Radarr API key..." >&2
              RADARR_API_KEY=$(get_api_key "radarr")
              echo "Radarr API key: ${RADARR_API_KEY:0:8}..." >&2
              
              echo "Getting Sonarr API key..." >&2
              SONARR_API_KEY=$(get_api_key "sonarr")
              echo "Sonarr API key: ${SONARR_API_KEY:0:8}..." >&2

              # Check if any API key is empty
              if [ -z "$SONARR_API_KEY" ] || [ -z "$RADARR_API_KEY" ] || [ -z "$LIDARR_API_KEY" ]; then
                echo "Failed to get all API keys" >&2
                echo "Sonarr API Key: ${SONARR_API_KEY:-(empty)}" >&2
                echo "Radarr API Key: ${RADARR_API_KEY:-(empty)}" >&2
                echo "Lidarr API Key: ${LIDARR_API_KEY:-(empty)}" >&2
                exit 1
              fi

              # Create or update secret
              if kubectl get secret $SECRET_NAME -n $NAMESPACE &> /dev/null; then
                echo "Secret $SECRET_NAME already exists in namespace $NAMESPACE. Updating..." >&2
                kubectl delete secret $SECRET_NAME -n $NAMESPACE
              fi

              echo "Creating new secret..." >&2
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: $SECRET_NAME
                namespace: $NAMESPACE
              type: Opaque
              stringData:
                sonarr_apikey: "${SONARR_API_KEY}"
                radarr_apikey: "${RADARR_API_KEY}"
                lidarr_apikey: "${LIDARR_API_KEY}"
              EOF

              echo "Servarr API keys stored in secret successfully" >&2